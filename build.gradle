plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'com.adarshr.test-logger' version '3.1.0'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.liquibase.gradle' version '2.1.1'
  id 'com.github.johnrengelman.processes' version '0.5.0'
  id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
  id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '15'
sourceSets.main.java.srcDirs = ['build/generated/sources/annotationProcessor/java/main','src/main/java']

application {
    mainClass = 'hexlet.code.AppApplication'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  implementation(
      'org.springframework.boot:spring-boot-starter-data-jpa',
      'org.springframework.boot:spring-boot-starter-web',
      'org.springframework.boot:spring-boot-starter-actuator',
      'org.springframework.boot:spring-boot-starter-validation',
      'org.springframework.boot:spring-boot-starter-security',
      'io.jsonwebtoken:jjwt:0.9.1',
      'org.springdoc:springdoc-openapi-ui:1.6.2',
      'org.liquibase:liquibase-core:4.6.1',
      'com.querydsl:querydsl-core:5.0.0',
      'com.querydsl:querydsl-jpa:5.0.0',
  )

  runtimeOnly(
      'com.h2database:h2',
      'org.postgresql:postgresql',
  )

  liquibaseRuntime(
        sourceSets.main.output,
        'org.liquibase:liquibase-core:4.6.1',
        'org.liquibase.ext:liquibase-hibernate5:4.6.2',
        'org.springframework.boot:spring-boot-starter-data-jpa',
    )

  annotationProcessor(
      'org.projectlombok:lombok',
      'com.querydsl:querydsl-apt:5.0.0:jpa',
      'javax.annotation:javax.annotation-api:1.3.2',
      'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final',
      )

  testImplementation(
      'org.springframework.security:spring-security-test',
      'org.springframework.boot:spring-boot-starter-test',
      'com.github.database-rider:rider-junit5:1.32.0',
      'org.codehaus.groovy:groovy-all:2.4.6',
      )
}

compileJava {
    options.release = 15
    options.encoding = 'UTF-8'
}

checkstyleMain {
    source = fileTree('src/main/java') 
}

testlogger {
    showStandardStreams true
}

test {
	useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test 
    reports {
      xml.required = true
    }
}

diffChangeLog {
    dependsOn compileJava
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/changelog-master.yml'
            url 'jdbc:h2:./taskManager'
            username ''
            password ''
            referenceUrl 'hibernate:spring:hexlet.code.entity.' +
                        '?dialect=org.hibernate.dialect.H2Dialect' +
                        '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
        }
    }
}

frontend {
    nodeVersion = '16.13.1'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}

processResources.dependsOn assembleFrontend

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean
